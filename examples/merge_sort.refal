* From "REFAL-5 programming guide & reference manual" by Valentin F. Turchin: http://www.botik.ru/~scp/book/ch_5.2.html

* Merge-sort
Sort { e1 = <Check <Merge <Pairs e1>>>; }

* Form ordered pairs from a list of terms
Pairs {
    t1 t2 e3, <Compare t1 t2>:
            {
                '-' = (t1 t2) <Pairs e3>;
                '+' = (t2 t1) <Pairs e3>;
            };
    t1 = (t1); 
        /* the odd term makes a separate list */
    = ;   }

Merge {
    (e1)(e2)e.Rest = 
        (<Merge2 (e1)e2>) <Merge e.Rest>;
    (e1) = (e1);
    =  ;  }

* merge two lists
Merge2 {
    (t1 eX) t2 eY, <Compare t1 t2>:
                {
                    '-' = t1 <Merge2 (eX)t2 eY>;
                    '+' = t2 <Merge2 (t1 eX)eY>;
                };
    (e1)e2 = e1 e2;  /* One of e1,e2 is empty */
        }

* Check whether there is one list or more
Check {
    (e1) = e1;
    e1 = <Check <Merge e1>>; }

Sep {
     = ;
    tx es = tx ' ' <Sep es>;
}

Main {
     = <Prout <Sep <Sort 3 73 66 99 29 10 91 5 76 43 42 39 33 8 51 38 41 86 97 94 54 65>>>;
}